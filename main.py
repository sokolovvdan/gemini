from fastapi import FastAPI
from pydantic import BaseModel
import google.generativeai as genai
import os

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI
app = FastAPI()

# –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è Render (—á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞–ª)
@app.get("/", include_in_schema=False)
def root():
    return {"status": "OK"}

@app.head("/", include_in_schema=False)
def root_head():
    return

# –ú–æ–¥–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞
class CleanRequest(BaseModel):
    name: str
    website: str = ""

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Gemini (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π –∫–ª—é—á)
genai.configure(api_key=os.getenv("GEMINI_API_KEY"))

model = genai.GenerativeModel("gemini-pro")
chat_session = model.start_chat()

# –û—Å–Ω–æ–≤–Ω–æ–π —Ä–æ—É—Ç
@app.post("/clean-name")
async def clean_name(request: CleanRequest):
    message = f"–ò—Å—Ö–æ–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {request.name}\t–°–∞–π—Ç: {request.website}\t–û—á–∏—â–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:"
    
    print("üü¢ Incoming request:", message)

    response = chat_session.send_message(message)

    print("üß† Gemini response:", response.text)

    return {"cleaned": response.text.strip()}

from fastapi import FastAPI
from pydantic import BaseModel
import google.generativeai as genai
import os

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI
app = FastAPI()

# ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω GET / –∏ HEAD /, —á—Ç–æ–±—ã Render –Ω–µ –¥–∞–≤–∞–ª 404
@app.get("/", include_in_schema=False)
def root():
    return {"status": "API is alive"}

@app.head("/", include_in_schema=False)
def root_head():
    return

# üîπ –ú–æ–¥–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞
class CleanRequest(BaseModel):
    name: str
    website: str = ""

# üîπ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Gemini API (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π –∫–ª—é—á –≤ Render Variables)
genai.configure(api_key=os.getenv("GEMINI_API_KEY"))

model = genai.GenerativeModel("gemini-pro")
chat_session = model.start_chat()

# üîπ –û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
@app.post("/clean-name")
async def clean_name(request: CleanRequest):
    message = f"–ò—Å—Ö–æ–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {request.name}\t–°–∞–π—Ç: {request.website}\t–û—á–∏—â–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:"
    
    print("üü¢ Incoming request:", message)

    response = chat_session.send_message(message)

    print("üß† Gemini response:", response.text)

    return {"cleaned": response.text.strip()}
